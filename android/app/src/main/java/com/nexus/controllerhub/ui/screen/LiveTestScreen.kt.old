package com.nexus.controllerhub.ui.screen

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material.icons.filled.Stop
import androidx.compose.material.icons.filled.FiberManualRecord
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.runtime.collectAsState
import com.nexus.controllerhub.service.ControllerAccessibilityService
import com.nexus.controllerhub.util.ControllerInputCapture
import com.nexus.controllerhub.ui.component.ControllerVisualization
import com.nexus.controllerhub.util.ControllerDetector

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LiveTestScreen(
    onNavigateBack: () -> Unit
) {
    val context = LocalContext.current
    val inputCapture = remember { ControllerInputCapture(context) }
    val controllerDetector = remember { ControllerDetector(context) }
    
    // Collect real-time input state from our capture system
    val pressedButtons by inputCapture.pressedButtons.collectAsState()
    val leftStickPosition by inputCapture.leftStickPosition.collectAsState()
    val rightStickPosition by inputCapture.rightStickPosition.collectAsState()
    val leftTrigger by inputCapture.leftTrigger.collectAsState()
    val rightTrigger by inputCapture.rightTrigger.collectAsState()
    
    // Test mode state
    val isTestMode by inputCapture.isTestMode.collectAsState()
    val rawInputLog by inputCapture.rawInputLog.collectAsState()
    val remappedOutputLog by inputCapture.remappedOutputLog.collectAsState()
    
    // Macro recording state
    val isRecording by inputCapture.isRecording.collectAsState()
    val recordedEvents by inputCapture.recordedEvents.collectAsState()
    
    // Controller detection
    val connectedControllers by controllerDetector.connectedControllers.collectAsState()
    
    LaunchedEffect(Unit) {
        controllerDetector.startDetection()
    }
    
    DisposableEffect(Unit) {
        onDispose {
            controllerDetector.stopDetection()
            inputCapture.stopTestMode()
            if (isRecording) {
                inputCapture.stopRecording()
            }
        }
    }
    
    // Determine controller type
    val controllerType = connectedControllers.firstOrNull()?.controllerType
        ?: ControllerDetector.ControllerType.GENERIC
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Live Controller Test") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Controller Status
            ControllerStatusCard(connectedControllers)
            
            // Test Mode Controls
            TestModeControls(
                isTestMode = isTestMode,
                isRecording = isRecording,
                onStartTest = { inputCapture.startTestMode() },
                onStopTest = { inputCapture.stopTestMode() },
                onStartRecording = { inputCapture.startRecording() },
                onStopRecording = { inputCapture.stopRecording() }
            )
            
            if (isTestMode) {
                // Controller Visualization with real-time feedback
                Card(
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "Controller Visualization",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(12.dp))
                        
                        // Note: ControllerVisualization requires a profile, so we'll show a simple message instead
                        Text(
                            text = "Controller visualization will be shown here when a profile is loaded.\nFor now, check the real-time input display below.",
                            style = MaterialTheme.typography.bodyMedium,
                            modifier = Modifier.padding(16.dp)
                        )
                        
                        /*
                        ControllerVisualization(
                            profile = testProfile, // Would need a test profile
                            onButtonClick = { buttonCode ->
                                // Demonstrate button remapping
                                inputCapture.setButtonMapping(buttonCode, "REMAPPED_$buttonCode")
                            },
                            pressedButtons = pressedButtons,
                            leftStickPosition = leftStickPosition,
                            rightStickPosition = rightStickPosition,
                            leftTrigger = leftTrigger,
                            rightTrigger = rightTrigger,
                            controllerType = controllerType,
                            modifier = Modifier.height(300.dp)
                        )
                        */
                    }
                }
                
                // Real-time Input Display
                RealTimeInputDisplay(
                    pressedButtons = pressedButtons,
                    leftStickPosition = leftStickPosition,
                    rightStickPosition = rightStickPosition,
                    leftTrigger = leftTrigger,
                    rightTrigger = rightTrigger
                )
                
                // Input Logs
                InputLogsDisplay(
                    rawInputLog = rawInputLog,
                    remappedOutputLog = remappedOutputLog
                )
            }
            
            if (isRecording || recordedEvents.isNotEmpty()) {
                // Macro Recording Display
                MacroRecordingDisplay(
                    isRecording = isRecording,
                    recordedEvents = recordedEvents
                )
            }
        }
    }
}

@Composable
private fun ControllerStatusCard(connectedControllers: List<ControllerDetector.ConnectedController>) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = if (connectedControllers.isNotEmpty()) 
                MaterialTheme.colorScheme.primaryContainer 
            else 
                MaterialTheme.colorScheme.errorContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Controller Status",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(8.dp))
            
            if (connectedControllers.isEmpty()) {
                Text(
                    text = "❌ No controllers detected",
                    style = MaterialTheme.typography.bodyLarge
                )
                Text(
                    text = "Please connect a controller via USB or Bluetooth to test input.",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onErrorContainer
                )
            } else {
                Text(
                    text = "✅ ${connectedControllers.size} controller(s) connected",
                    style = MaterialTheme.typography.bodyLarge
                )
                for (controller in connectedControllers) {
                    Text(
                        text = "• ${controller.name} (${controller.controllerType})",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                }
            }
        }
    }
}

@Composable
private fun TestModeControls(
    isTestMode: Boolean,
    isRecording: Boolean,
    onStartTest: () -> Unit,
    onStopTest: () -> Unit,
    onStartRecording: () -> Unit,
    onStopRecording: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Test & Recording Controls",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(12.dp))
            
            // Test Mode Controls
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Button(
                    onClick = onStartTest,
                    enabled = !isTestMode,
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.PlayArrow, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Start Test")
                }
                
                Button(
                    onClick = onStopTest,
                    enabled = isTestMode,
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.error
                    )
                ) {
                    Icon(Icons.Default.Stop, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Stop Test")
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            // Macro Recording Controls
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Button(
                    onClick = onStartRecording,
                    enabled = !isRecording && isTestMode,
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.secondary
                    )
                ) {
                    Icon(Icons.Default.FiberManualRecord, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Record Macro")
                }
                
                Button(
                    onClick = onStopRecording,
                    enabled = isRecording,
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.error
                    )
                ) {
                    Icon(Icons.Default.Stop, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Stop Recording")
                }
            }
            
            if (isTestMode) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "🎮 Test mode active - press controller buttons to see real-time feedback",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isRecording) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "🔴 Recording macro - all controller inputs are being captured",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.error
                )
            }
        }
    }
}

@Composable
private fun RealTimeInputDisplay(
    pressedButtons: Set<String>,
    leftStickPosition: Pair<Float, Float>,
    rightStickPosition: Pair<Float, Float>,
    leftTrigger: Float,
    rightTrigger: Float
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Real-Time Controller Input",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(12.dp))
            
            // Pressed Buttons
            Text(
                text = "Pressed Buttons:",
                style = MaterialTheme.typography.bodyMedium,
                fontWeight = FontWeight.Medium
            )
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(
                        MaterialTheme.colorScheme.surfaceVariant,
                        RoundedCornerShape(8.dp)
                    )
                    .padding(12.dp)
                    .heightIn(min = 40.dp)
            ) {
                if (pressedButtons.isEmpty()) {
                    Text(
                        text = "No buttons pressed",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f),
                        fontFamily = FontFamily.Monospace
                    )
                } else {
                    Text(
                        text = pressedButtons.joinToString(", "),
                        style = MaterialTheme.typography.bodyMedium,
                        fontFamily = FontFamily.Monospace,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Analog Sticks
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Left Stick:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                MaterialTheme.colorScheme.surfaceVariant,
                                RoundedCornerShape(8.dp)
                            )
                            .padding(8.dp)
                    ) {
                        Text(
                            text = "X: %.2f\nY: %.2f".format(leftStickPosition.first, leftStickPosition.second),
                            style = MaterialTheme.typography.bodySmall,
                            fontFamily = FontFamily.Monospace,
                            fontSize = 12.sp
                        )
                    }
                }
                
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Right Stick:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                MaterialTheme.colorScheme.surfaceVariant,
                                RoundedCornerShape(8.dp)
                            )
                            .padding(8.dp)
                    ) {
                        Text(
                            text = "X: %.2f\nY: %.2f".format(rightStickPosition.first, rightStickPosition.second),
                            style = MaterialTheme.typography.bodySmall,
                            fontFamily = FontFamily.Monospace,
                            fontSize = 12.sp
                        )
                    }
                }
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Triggers
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Left Trigger:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                    LinearProgressIndicator(
                        progress = leftTrigger,
                        modifier = Modifier.fillMaxWidth(),
                        color = if (leftTrigger > 0.1f) MaterialTheme.colorScheme.primary else Color.Gray
                    )
                    Text(
                        text = "%.2f".format(leftTrigger),
                        style = MaterialTheme.typography.bodySmall,
                        fontFamily = FontFamily.Monospace
                    )
                }
                
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Right Trigger:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                    LinearProgressIndicator(
                        progress = rightTrigger,
                        modifier = Modifier.fillMaxWidth(),
                        color = if (rightTrigger > 0.1f) MaterialTheme.colorScheme.primary else Color.Gray
                    )
                    Text(
                        text = "%.2f".format(rightTrigger),
                        style = MaterialTheme.typography.bodySmall,
                        fontFamily = FontFamily.Monospace
                    )
                }
            }
        }
    }
}

@Composable
private fun InputLogsDisplay(
    rawInputLog: List<String>,
    remappedOutputLog: List<String>
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Input Processing Logs",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(12.dp))
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // Raw Input Log
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Raw Input:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(150.dp)
                            .background(
                                MaterialTheme.colorScheme.surfaceVariant,
                                RoundedCornerShape(8.dp)
                            )
                            .padding(8.dp)
                    ) {
                        LazyColumn {
                            items(rawInputLog) { logEntry ->
                                Text(
                                    text = logEntry,
                                    style = MaterialTheme.typography.bodySmall,
                                    fontFamily = FontFamily.Monospace,
                                    fontSize = 10.sp
                                )
                            }
                        }
                    }
                }
                
                // Remapped Output Log
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Processed Output:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(150.dp)
                            .background(
                                MaterialTheme.colorScheme.primaryContainer,
                                RoundedCornerShape(8.dp)
                            )
                            .padding(8.dp)
                    ) {
                        LazyColumn {
                            items(remappedOutputLog) { logEntry ->
                                Text(
                                    text = logEntry,
                                    style = MaterialTheme.typography.bodySmall,
                                    fontFamily = FontFamily.Monospace,
                                    fontSize = 10.sp,
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun MacroRecordingDisplay(
    isRecording: Boolean,
    recordedEvents: List<ControllerInputCapture.ControllerEvent>
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Macro Recording",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(12.dp))
            
            if (isRecording) {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        Icons.Default.FiberManualRecord,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.error,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Recording in progress... (${recordedEvents.size} events captured)",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.error
                    )
                }
            } else if (recordedEvents.isNotEmpty()) {
                Text(
                    text = "Recorded ${recordedEvents.size} events:",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Medium
                )
            }
            
            if (recordedEvents.isNotEmpty()) {
                Spacer(modifier = Modifier.height(8.dp))
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(200.dp)
                        .background(
                            MaterialTheme.colorScheme.surfaceVariant,
                            RoundedCornerShape(8.dp)
                        )
                        .padding(8.dp)
                ) {
                    LazyColumn {
                        items(recordedEvents) { event ->
                            Text(
                                text = "${event.timestamp}ms: ${event.type} ${event.buttonCode ?: "Motion"}",
                                style = MaterialTheme.typography.bodySmall,
                                fontFamily = FontFamily.Monospace,
                                fontSize = 10.sp
                            )
                        }
                    }
                }
            }
        }
    }
}