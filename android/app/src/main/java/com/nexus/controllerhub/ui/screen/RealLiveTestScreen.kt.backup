package com.nexus.controllerhub.ui.screen

import com.nexus.controllerhub.core.ControllerInputSystem
import com.nexus.controllerhub.ui.component.SimpleControllerVisualization
import androidx.compose.ui.platform.LocalContext
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material.icons.filled.Stop
import androidx.compose.material.icons.filled.Clear
import androidx.compose.material.icons.filled.FiberManualRecord
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp



@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RealLiveTestScreen(
    onNavigateBack: () -> Unit
) {
    val context = LocalContext.current
    val inputSystem = ControllerInputSystem.getInstance(context)
    
    // State management using ControllerInputSystem
    val connectedControllers by inputSystem.connectedControllers.collectAsState()
    val activeController by inputSystem.selectedController.collectAsState()
    val isRecording by inputSystem.isRecordingMacro.collectAsState()
    val recordedMacro by inputSystem.recordedMacro.collectAsState()
    val buttonStates by inputSystem.buttonStates.collectAsState()
    val analogStates by inputSystem.analogStates.collectAsState()
    
    var isInputCaptureActive by remember { mutableStateOf(false) }
    var showInputDetails by remember { mutableStateOf(false) }
    var showMacroDetails by remember { mutableStateOf(false) }
    
    // Enable/disable input capture based on state
    LaunchedEffect(isInputCaptureActive) {
        if (isInputCaptureActive) {
            inputSystem.enableInputCapture()
        } else {
            inputSystem.disableInputCapture()
        }
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("🧪 Live Controller Testing") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Controller Status Section
            ControllerStatusSection(
                connectedControllers = connectedControllers,
                selectedController = activeController,
                onSelectController = { inputSystem.selectController(it) }
            )
            
            // Test Controls Section
            TestControlsSection(
                isInputCaptureActive = isInputCaptureActive,
                onToggleInputCapture = { isInputCaptureActive = !isInputCaptureActive },
                isRecording = isRecording,
                onStartRecording = { inputSystem.startMacroRecording() },
                onStopRecording = { inputSystem.stopMacroRecording() },
                onClearMacro = { inputSystem.clearMacro() },
                showInputDetails = showInputDetails,
                onToggleInputDetails = { showInputDetails = !showInputDetails },
                showMacroDetails = showMacroDetails,
                onToggleMacroDetails = { showMacroDetails = !showMacroDetails }
            )
            
            if (isInputCaptureActive && activeController != null) {
                // Live Controller Visualization
                selectedController?.let { controller ->
                    SimpleControllerVisualization(
                        controller = controller,
                        buttonStates = buttonStates,
                        analogStates = analogStates,
                        modifier = Modifier.fillMaxSize()
                    )
                }
                
                // Input Details (if enabled)
                if (showInputDetails) {
                    InputDetailsSection(
                        buttonStates = buttonStates,
                        analogStates = analogStates,
                        onClearLog = { /* TODO: implement clear history */ }
                    )
                }
                
                // Macro Details (if enabled and macro exists)
                if (showMacroDetails && recordedMacro.isNotEmpty()) {
                    MacroDetailsSection(recordedMacro = recordedMacro)
                }
            } else if (!isInputCaptureActive) {
                // Setup Instructions
                SetupInstructionsSection()
            } else {
                // No controller selected
                NoControllerSelectedSection()
            }
        }
    }
}

@Composable
private fun ControllerStatusSection(
    connectedControllers: List<ControllerInputSystem.DetectedController>,
    selectedController: ControllerInputSystem.DetectedController?,
    onSelectController: (ControllerInputSystem.DetectedController) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = when {
                selectedController != null -> MaterialTheme.colorScheme.primaryContainer
                connectedControllers.isNotEmpty() -> MaterialTheme.colorScheme.secondaryContainer
                else -> MaterialTheme.colorScheme.errorContainer
            }
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "🎮 Controller Status",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            when {
                selectedController != null -> {
                    Text(
                        text = "✅ Active Controller:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    
                    Text(
                        text = selectedController.name,
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        StatusChip("ID: ${selectedController.deviceId}")
                        StatusChip(selectedController.type.name)
                        StatusChip("${selectedController.supportedAxes.size} Axes")
                        StatusChip("${selectedController.supportedButtons.size} Buttons")
                    }
                    
                    if (connectedControllers.size > 1) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "💡 ${connectedControllers.size - 1} other controller(s) available. Go to Device Selection to switch.",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)
                        )
                    }
                }
                
                connectedControllers.isNotEmpty() -> {
                    Text(
                        text = "⚠️ Controllers detected but none selected:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        color = MaterialTheme.colorScheme.onSecondaryContainer
                    )
                    
                    for (controller in connectedControllers.take(3)) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "• ${controller.name}",
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSecondaryContainer
                            )
                            
                            TextButton(
                                onClick = { onSelectController(controller) }
                            ) {
                                Text("Select")
                            }
                        }
                    }
                    
                    if (connectedControllers.size > 3) {
                        Text(
                            text = "... and ${connectedControllers.size - 3} more",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)
                        )
                    }
                }
                
                else -> {
                    Text(
                        text = "❌ No controllers detected",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        color = MaterialTheme.colorScheme.onErrorContainer
                    )
                    
                    Text(
                        text = "Please connect a controller via USB or Bluetooth to continue.",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onErrorContainer
                    )
                }
            }
        }
    }
}

@Composable
private fun StatusChip(text: String) {
    Surface(
        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),
        shape = androidx.compose.foundation.shape.RoundedCornerShape(8.dp)
    ) {
        Text(
            text = text,
            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),
            style = MaterialTheme.typography.bodySmall,
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
private fun TestControlsSection(
    isInputCaptureActive: Boolean,
    onToggleInputCapture: () -> Unit,
    isRecording: Boolean,
    onStartRecording: () -> Unit,
    onStopRecording: () -> Unit,
    onClearMacro: () -> Unit,
    showInputDetails: Boolean,
    onToggleInputDetails: () -> Unit,
    showMacroDetails: Boolean,
    onToggleMacroDetails: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = "🎛️ Test Controls",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            
            // Main control buttons
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = onToggleInputCapture,
                    modifier = Modifier.weight(1f),
                    colors = if (isInputCaptureActive) {
                        ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error)
                    } else {
                        ButtonDefaults.buttonColors()
                    }
                ) {
                    Icon(
                        if (isInputCaptureActive) Icons.Default.Stop else Icons.Default.PlayArrow,
                        contentDescription = null
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(if (isInputCaptureActive) "Stop Capture" else "Start Capture")
                }
            }
            
            // Macro controls
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = if (isRecording) onStopRecording else onStartRecording,
                    modifier = Modifier.weight(1f),
                    enabled = isInputCaptureActive,
                    colors = if (isRecording) {
                        ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error)
                    } else {
                        ButtonDefaults.buttonColors()
                    }
                ) {
                    Icon(
                        if (isRecording) Icons.Default.Stop else Icons.Default.FiberManualRecord,
                        contentDescription = null
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(if (isRecording) "Stop Recording" else "Record Macro")
                }
                
                Button(
                    onClick = onClearMacro,
                    modifier = Modifier.weight(1f),
                    enabled = isInputCaptureActive
                ) {
                    Icon(Icons.Default.Clear, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Clear Macro")
                }
            }
            
            // View controls
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = onToggleInputDetails,
                    modifier = Modifier.weight(1f),
                    enabled = isInputCaptureActive
                ) {
                    Icon(
                        if (showInputDetails) Icons.Default.VisibilityOff else Icons.Default.Visibility,
                        contentDescription = null
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(if (showInputDetails) "Hide Input Log" else "Show Input Log")
                }
                
                Button(
                    onClick = onToggleMacroDetails,
                    modifier = Modifier.weight(1f),
                    enabled = isInputCaptureActive
                ) {
                    Icon(
                        if (showMacroDetails) Icons.Default.VisibilityOff else Icons.Default.Visibility,
                        contentDescription = null
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(if (showMacroDetails) "Hide Macro" else "Show Macro")
                }
            }
        }
    }
}

@Composable
private fun InputDetailsSection(
    buttonStates: Map<Int, Boolean>,
    analogStates: Map<Int, Float>,
    onClearLog: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "📊 Live Input States",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                
                TextButton(onClick = onClearLog) {
                    Text("Clear")
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            // Button States
            if (buttonStates.isNotEmpty()) {
                Text(
                    text = "Button States:",
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
                
                LazyColumn(
                    modifier = Modifier.height(120.dp),
                    verticalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    items(buttonStates.entries.toList()) { (button, pressed) ->
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(text = "Button $button")
                            Text(
                                text = if (pressed) "PRESSED" else "Released",
                                color = if (pressed) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                }
            }
            
            // Analog States
            if (analogStates.isNotEmpty()) {
                Text(
                    text = "Analog States:",
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
                
                LazyColumn(
                    modifier = Modifier.height(120.dp),
                    verticalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    items(analogStates.entries.toList()) { (axis, value) ->
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(text = "Axis $axis")
                            Text(text = String.format("%.3f", value))
                        }
                    }
                }
            }
            
            if (buttonStates.isEmpty() && analogStates.isEmpty()) {
                Text(
                    text = "No input detected yet. Press buttons or move sticks to see data.",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }
    }
}



@Composable
private fun MacroDetailsSection(
    recordedMacro: List<ControllerInputSystem.MacroStep>
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "📹 Recorded Macro (${recordedMacro.size} steps)",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            LazyColumn(
                modifier = Modifier.height(150.dp),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                items(recordedMacro) { step ->
                    MacroStepItem(step)
                }
            }
        }
    }
}

@Composable
private fun MacroStepItem(step: ControllerInputSystem.MacroStep) {
    Card(
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f)
        )
    ) {
        Text(
            text = "${step.timestamp}ms: ${step.description}",
            style = MaterialTheme.typography.bodySmall,
            fontFamily = FontFamily.Monospace,
            modifier = Modifier.padding(8.dp)
        )
    }
}

@Composable
private fun SetupInstructionsSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "🚀 Getting Started",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                InstructionStep("1", "Connect a controller via USB or Bluetooth")
                InstructionStep("2", "Select the controller from the status section above")
                InstructionStep("3", "Tap 'Start Capture' to begin real-time input monitoring")
                InstructionStep("4", "Press buttons and move sticks to see live visualization")
                InstructionStep("5", "Use 'Record Macro' to capture input sequences")
                InstructionStep("6", "Enable input/macro logs for detailed analysis")
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Text(
                text = "⚠️ Important: Input capture requires the app to be in focus. Make sure this screen is active when testing.",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
private fun InstructionStep(number: String, text: String) {
    Row(
        verticalAlignment = Alignment.CenterVertically
    ) {
        Surface(
            color = MaterialTheme.colorScheme.primary,
            shape = androidx.compose.foundation.shape.CircleShape,
            modifier = Modifier.size(24.dp)
        ) {
            Box(
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = number,
                    color = MaterialTheme.colorScheme.onPrimary,
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }
        
        Spacer(modifier = Modifier.width(12.dp))
        
        Text(
            text = text,
            style = MaterialTheme.typography.bodyMedium
        )
    }
}

@Composable
private fun NoControllerSelectedSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.secondaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "🎮 Controller Selection Required",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onSecondaryContainer
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            Text(
                text = "Controllers are connected but none is selected for input capture. Please select a controller from the status section above or go to Device Selection.",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSecondaryContainer,
                textAlign = TextAlign.Center
            )
        }
    }
}